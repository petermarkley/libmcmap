CHECKED_APPEND	nbt_parsing.c	/^#define CHECKED_APPEND(b, ptr, len) do { \\$/
CHECKED_MALLOC	nbt_parsing.c	/^#define CHECKED_MALLOC(var, n, on_error) do { \\$/
COPY_INTO_PAYLOAD	nbt_parsing.c	/^#define COPY_INTO_PAYLOAD(payload_name) \\$/
DEF_CASE	nbt_util.c	/^#define DEF_CASE(name) case name: return #name;$/
DUMP_NUM	nbt_parsing.c	/^#define DUMP_NUM(type, x) do {               \\$/
INIT_LIST_HEAD	list.h	/^#define INIT_LIST_HEAD(head) (head)->flink = (head/
Mcheck	check.c	/^int main(int argc, char** argv)$/
Mmain	main.c	/^int main(int argc, char **argv)$/
READ_GENERIC	nbt_parsing.c	/^#define READ_GENERIC(dest, n, scanner, on_failure)/
SAFE_NAME	nbt_parsing.c	/^#define SAFE_NAME(node) ((node)->name ? (node)->na/
__compress	nbt_loading.c	/^static struct buffer __compress(const void* mem,$/
__decompress	nbt_loading.c	/^static struct buffer __decompress(const void* mem,/
__dump_binary	nbt_parsing.c	/^static inline nbt_status __dump_binary(const nbt_n/
__nbt_dump_ascii	nbt_parsing.c	/^static inline nbt_status __nbt_dump_ascii(const nb/
__strdup	nbt_treeops.c	/^static inline char* __strdup(const char* s)$/
aux	nbt.h	/^typedef bool (*nbt_visitor_t)(nbt_node* node, void/
be2ne	nbt_parsing.c	/^static inline void* be2ne(void* s, size_t len)$/
bprintf	nbt_parsing.c	/^static inline void bprintf(struct buffer* b, const/
buffer	buffer.c	/^    *b = (struct buffer) {$/
buffer_append	buffer.c	/^int buffer_append(struct buffer* b, const void* da/
buffer_free	buffer.c	/^void buffer_free(struct buffer* b)$/
buffer_reserve	buffer.c	/^int buffer_reserve(struct buffer* b, size_t reserv/
check_size	check.c	/^static bool check_size(nbt_node* n, void* aux)$/
clone_list	nbt_treeops.c	/^static struct nbt_list* clone_list(struct nbt_list/
die	check.c	/^static void die(const char* message)$/
die_with_err	check.c	/^static void die_with_err(int err)$/
dump_byte_array	nbt_parsing.c	/^static inline void dump_byte_array(const struct nb/
dump_byte_array_binary	nbt_parsing.c	/^static nbt_status dump_byte_array_binary(const str/
dump_compound_binary	nbt_parsing.c	/^static nbt_status dump_compound_binary(const struc/
dump_int_array	nbt_parsing.c	/^static inline void dump_int_array(const struct nbt/
dump_int_array_binary	nbt_parsing.c	/^static nbt_status dump_int_array_binary(const stru/
dump_list_binary	nbt_parsing.c	/^static nbt_status dump_list_binary(const struct nb/
dump_list_contents_ascii	nbt_parsing.c	/^static inline nbt_status dump_list_contents_ascii(/
dump_nbt	main.c	/^void dump_nbt(const char *filename)$/
dump_string_binary	nbt_parsing.c	/^static nbt_status dump_string_binary(const char* n/
filter_list	nbt_treeops.c	/^static struct nbt_list* filter_list(const struct n/
floats_are_close	nbt_util.c	/^static inline bool floats_are_close(double a, doub/
get_tree	check.c	/^static nbt_node* get_tree(const char* filename)$/
indent	nbt_parsing.c	/^static inline void indent(struct buffer* b, size_t/
index_of	nbt_treeops.c	/^static size_t index_of(const char* s, char c)$/
lazy_init	buffer.c	/^static int lazy_init(struct buffer* b)$/
likely	buffer.c	/^#define likely(x)   __builtin_expect(!!(x), 1)$/
list_add_head	list.h	/^static inline struct list_head* list_add_head(stru/
list_add_tail	list.h	/^static inline struct list_head* list_add_tail(stru/
list_del	list.h	/^static inline void list_del(struct list_head* loc)/
list_empty	list.h	/^#define list_empty(head) ((head)->flink == (head))/
list_entry	list.h	/^#define list_entry(ptr, type, member) \\$/
list_for_each	list.h	/^#define list_for_each(pos, head) \\$/
list_for_each_reverse	list.h	/^#define list_for_each_reverse(pos, head) \\$/
list_for_each_reverse_safe	list.h	/^#define list_for_each_reverse_safe(pos, p, head)  /
list_for_each_safe	list.h	/^#define list_for_each_safe(pos, n, head)          /
list_head	list.h	/^struct list_head {$/
list_is_homogenous	nbt_parsing.c	/^static nbt_type list_is_homogenous(const struct nb/
list_length	list.h	/^static inline size_t list_length(const struct list/
little_endian	nbt_parsing.c	/^static inline int little_endian()$/
max	nbt_util.c	/^#define max(a, b) ((a) > (b) ? (a) : (b))$/
memscan	nbt_parsing.c	/^static inline const void* memscan(void* dest, cons/
min	nbt_util.c	/^#define min(a, b) ((a) < (b) ? (a) : (b))$/
names_are_equal	nbt_treeops.c	/^static bool names_are_equal(const nbt_node* node, /
nbt_byte_array	nbt.h	/^        struct nbt_byte_array {$/
nbt_clone	nbt_treeops.c	/^nbt_node* nbt_clone(nbt_node* tree)$/
nbt_compression_strategy	nbt.h	/^} nbt_compression_strategy;$/
nbt_dump_ascii	nbt_parsing.c	/^char* nbt_dump_ascii(const nbt_node* tree)$/
nbt_dump_binary	nbt_parsing.c	/^struct buffer nbt_dump_binary(const nbt_node* tree/
nbt_dump_compressed	nbt_loading.c	/^struct buffer nbt_dump_compressed(const nbt_node* /
nbt_dump_file	nbt_loading.c	/^nbt_status nbt_dump_file(const nbt_node* tree, FIL/
nbt_eq	nbt_util.c	/^bool nbt_eq(const nbt_node* restrict a, const nbt_/
nbt_error_to_string	nbt_util.c	/^const char* nbt_error_to_string(nbt_status s)$/
nbt_filter	nbt_treeops.c	/^nbt_node* nbt_filter(const nbt_node* tree, nbt_pre/
nbt_filter_inplace	nbt_treeops.c	/^nbt_node* nbt_filter_inplace(nbt_node* tree, nbt_p/
nbt_find	nbt_treeops.c	/^nbt_node* nbt_find(nbt_node* tree, nbt_predicate_t/
nbt_find_by_name	nbt_treeops.c	/^nbt_node* nbt_find_by_name(nbt_node* tree, const c/
nbt_find_by_path	nbt_treeops.c	/^nbt_node* nbt_find_by_path(nbt_node* tree, const c/
nbt_free	nbt_treeops.c	/^void nbt_free(nbt_node* tree)$/
nbt_free_list	nbt_treeops.c	/^void nbt_free_list(struct nbt_list* list)$/
nbt_full_list_length	nbt_treeops.c	/^static inline size_t nbt_full_list_length(struct n/
nbt_int_array	nbt.h	/^        struct nbt_int_array {$/
nbt_list	nbt.h	/^        struct nbt_list {$/
nbt_list_item	nbt_treeops.c	/^nbt_node* nbt_list_item(nbt_node* list, int n) {$/
nbt_map	nbt_treeops.c	/^bool nbt_map(nbt_node* tree, nbt_visitor_t v, void/
nbt_node	nbt.h	/^} nbt_node;$/
nbt_parse	nbt_parsing.c	/^nbt_node* nbt_parse(const void* mem, size_t len)$/
nbt_parse_compressed	nbt_loading.c	/^nbt_node* nbt_parse_compressed(const void* chunk_s/
nbt_parse_file	nbt_loading.c	/^nbt_node* nbt_parse_file(FILE* fp)$/
nbt_parse_path	nbt_loading.c	/^nbt_node* nbt_parse_path(const char* filename)$/
nbt_size	nbt_treeops.c	/^size_t nbt_size(const nbt_node* tree)$/
nbt_status	nbt.h	/^} nbt_status;$/
nbt_type	nbt.h	/^} nbt_type;$/
nbt_type_to_string	nbt_util.c	/^const char* nbt_type_to_string(nbt_type t)$/
parse_unnamed_tag	nbt_parsing.c	/^static inline nbt_node* parse_unnamed_tag(nbt_type/
partial_strcmp	nbt_treeops.c	/^static int partial_strcmp(const char* s1, size_t l/
read_byte_array	nbt_parsing.c	/^static inline struct nbt_byte_array read_byte_arra/
read_compound	nbt_parsing.c	/^static struct nbt_list* read_compound(const char**/
read_file	nbt_loading.c	/^static struct buffer read_file(FILE* fp)$/
read_int_array	nbt_parsing.c	/^static inline struct nbt_int_array read_int_array(/
read_list	nbt_parsing.c	/^static struct nbt_list* read_list(const char** mem/
read_string	nbt_parsing.c	/^static inline char* read_string(const char** memor/
safe_strcmp	nbt_util.c	/^static int safe_strcmp(const char* a, const char* /
safe_strdup	nbt_treeops.c	/^static inline char* safe_strdup(const char* s)$/
swap_bytes	nbt_parsing.c	/^static inline void* swap_bytes(void* s, size_t len/
swapped_memscan	nbt_parsing.c	/^static inline const void* swapped_memscan(void* de/
unlikely	buffer.c	/^#define unlikely(x) __builtin_expect(  (x), 0)$/
write_file	nbt_loading.c	/^static nbt_status write_file(FILE* fp, const void*/
